---
title: "Querying a MySQL database"
format:  pdf
  
execute: 
  echo: true
editor_options: 
  chunk_output_type: inline
---

NOTE: The Rendered document was too long, so the professor reccomended that we shorten the document and to use limit. 


This lab was originally created by Profs Ben Baumer and Jordan Crouser. I've edited it slightly. 

```{r global_options, include=FALSE}
posted <- Sys.time() > "2020-11-25 11:00:00 EDT"
```

[SQL](https://en.wikipedia.org/wiki/SQL) is a longstanding database querying language. It is a loosely-implemented standard. We will be using [MySQL](https://en.wikipedia.org/wiki/MySQL).

To facilitate our connection to the MySQL database server, we will need to install the `RMySQL` package. 

```{r, message=FALSE, eval=FALSE}
# do NOT install RMySQL if you are on the RStudio Server
install.packages("RMySQL")
```

**Goal**: by the end of this lab, you will be able to write basic `SELECT` queries in SQL and retrieve the results into R.

## Connecting to MySQL

The data we will be using is stored on a server in Bass Hall. It's called `scidb.smith.edu`. We can connect through the `dbConnect()` function provided by the `DBI` package (which is loaded automatically when you load `RMySQL`). You will also need the `RMySQL` package installed. 

```{r, message=FALSE}
library(tidyverse)
library(RMySQL)
db <- dbConnect(
  MySQL(),
  host = "scidb.smith.edu",
  user = "sds192",
  password = "DSismfc@S",
  dbname = "imdb"
  )
knitr::opts_chunk$set(connection= 'db', max.print = 5)
```

This chunk of code will allow you to connect to `scidb`. Note that this creates a database connection object named `db`, which has the class `MySQLConnection`. 

```{r}
class(db)
```

Also, we set the `connection` parameter for all future chunks in this R Markdown file. Note also that the `max.print` argument sets the maximum number of results printed by each query. 

Each of the following chunks makes use of the SQL engine functionality in `knitr`. You may want to [read about this](https://bookdown.org/yihui/rmarkdown/language-engines.html#sql). Each of the following chunks is an `sql` chunk -- as opposed to an `r` chunk!

To retrieve the results from a query in R, use the `dbGetQuery()` function from the `DBI` package (which is automatically loaded when you load `RMySQL`). Its first argument is a database connection object, and the second argument is an SQL query as a character vector. 

## Retrieving data

We want to be able to see which type of databases exist on the server. We can do this with SHOW DATABASES

```{r}

dbGetQuery(conn = db,
           "SHOW DATABASES") |>
  head(5)
```

**Note: If you had a problem on Friday and need to use dbGetQuery(conn=db, "SHOW DATABASES;) you will have to edit the code chunks below and above. Otherwise you can use the SQL chunks as printed. **


You don't actually need the ; at the end of the quiery above for MySQL, but for other SQL dialects you do so it doesn't hurt. 

We want to use the imdb databse and we have to tell our db connection that. 

```{r}
dbGetQuery(conn = db,"USE imdb;")
```

Its fine that there are 0 rows, this is just how we tell R which db we want to use. 

Let's look at the tables available in imdb. 

```{r}
dbGetQuery(conn = db, "SHOW TABLES;")
```

See the kind_type table? That one shows what type of movie it is. 

This query returns the list of kinds of "movies" stored in the IMDB. We are selecting everything with * from the kind_type table.

```{r}
#| output = TRUE
dbGetQuery(conn = db, "SELECT * FROM kind_type;")
```

Of course, you will often want to store the result of your query as a data frame. This can be achieved by setting the `output.var` argument in the chunk. Here we retrieve the list of different types of information stored in the database, save it as a data frame in R, and show the first few rows. 

```{r}
## output.var="info_types" in this chunk

info_types<- dbGetQuery(conn = db, "SELECT * FROM info_type;")
```

We now have a `data.frame` called `info_types` in our environment.

```{r}
# Note: this is an r chunk s we use R instead of SQL.

head(info_types)
```

That's all you need to know about how to get data from MySQL into R. The rest of this lab consists of practicing writing SQL queries. It may be useful to reference the full [documentation for `SELECT` queries](http://dev.mysql.com/doc/refman/5.6/en/select.html). 

For example, let's say I wanted to find information on the wacky Bill Murray Movie [Groundhog Day](https://www.imdb.com/title/tt0107048/). 


The titles are stored in the `title` field (i.e. column) in the `title` table. [Note: your professor is not responsible for naming these tables and fields!] Each row in the `title` table corresponds to a single movie, but of course, we need to restrict the rows we retrieve to only those where the `title` field equals `Groundhog Day`. The following query achieves this.

> Note: SQL does not require the `==` for testing equality, since you aren't ever changing the data. 

> Note: You have to use `'` single quotes since you are working within a `"` double-quoted string. 

In the chunk below we select every column from the title-table where the title-variable equals 'Groundhog Day'



```{r}
dbGetQuery(conn = db, 
           "SELECT *
           FROM title
           WHERE title= 'Groundhog Day'
           LIMIT 10;")
```


That retrieved a lot of movies! Let's see if we can refine our query. First, movies (as opposed to TV episodes, etc.) have the `kind_id` value of `1`. 

```{r}
dbGetQuery(conn = db, "SELECT *
           FROM title
           WHERE title = 'Groundhog Day'
           AND kind_id = 1;")
```

Now we have the result that I want. 

Imagine that I didn't know the full title of the movie I could soften my query by searching for the phrase `Groundhog` within the title. We can do this using the `LIKE` function along with some wildcards (`%` in SQL).

```{r}
dbGetQuery(conn = db, "SELECT *
           FROM title
           WHERE title LIKE '%Groundhog%'
           AND kind_id = 1;")
```

Pretend I'm still not sure which of the above four movies is the real Groundhog Day movie I'm interested in, but I'm sure its the first movie that came out. I could put them in order with the code below. 

```{r}
dbGetQuery(conn = db, "SELECT *
           FROM title
           WHERE title LIKE '%Groundhog%'
           AND kind_id = 1
           ORDER BY production_year;")
```

Finally I can select just the three columns I'm interested in. Also notice that I am renaming the title table as t. So I select the columns t.title and t.production_year. This is called creating an alias. The convention is table.variable. This will be useful when joining tables. 

```{r}
dbGetQuery(conn = db, "SELECT t.id, t.title, t.production_year
           FROM title AS t
           WHERE title LIKE '%Groundhog%'
           AND t.kind_id = 1
           ORDER BY t.production_year;")
```

Its the first Groundhog day that came out in 1993 with ID 3664274.

# Exercise: 

Find the original Ghostbusters in the `title` table. 

```{r}
dbGetQuery(conn = db, "SELECT *
           FROM title
           WHERE title LIKE '%Ghostbusters%'
           AND kind_id = 1
           LIMIT 10;")
  

```

Now lets consider the name table

```{r}
dbGetQuery(conn= db, "DESCRIBE name;")
```

# Exercise: 

Find [Andie MacDowell ](https://www.imdb.com/title/tt0107048/fullcredits?ref_=tt_ov_st_sm)'s `id` in the `name` table. 

> Note: that names are listed last name first and seperated by a comma (eg Murray, Bill)


```{r}
dbGetQuery(conn= db,"SELECT id
           FROM name
           WHERE name LIKE 'MacDowell, Andie%';")

```


## Joining tables

In the IMDB, the `title` table contains information about movies, the `name` table contains the names of people, the `char_name` table contains information about the names of characters, and the `cast_info` table contains information about which people played which roles in which movies. Linking the tables together is essential in order to extract information from the database. 

Since we already know that the ID of *Groundhog Day* is `3664274`, we can use that to find all of the cast assignments. 


```{r}
dbGetQuery(conn= db, "SELECT *
           FROM cast_info
           WHERE movie_id = 3664274
           LIMIT 10;")
```

