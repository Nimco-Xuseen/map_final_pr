[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "final_project",
    "section": "",
    "text": "This is the landing page"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "My name is Wheebuns chewiebag. My name was generated from this site. My photo is from here.\n\n\nIf you would like to contact me please do so at 248-434-5508"
  },
  {
    "objectID": "Readme.html",
    "href": "Readme.html",
    "title": "My page",
    "section": "",
    "text": "# For your final project you will build a website displaying three pieces that show off:\nYou do not need to make new versions of these things. You can just move the files into this new project you’ve created. If you have kept organized this should be quick. If you have not kept organized remember that your github repos have your work in them. You are welcome to make new data pieces, but don’t spend to much time on that."
  },
  {
    "objectID": "Readme.html#you-will-get-two-outcomes-from-this-project",
    "href": "Readme.html#you-will-get-two-outcomes-from-this-project",
    "title": "My page",
    "section": "You will get two outcomes from this project:",
    "text": "You will get two outcomes from this project:\n\nYou will learn a bit about how to publish a website on the internet.\nYou will understand the filing structure that R (and all programming languages) use."
  },
  {
    "objectID": "Readme.html#requirements",
    "href": "Readme.html#requirements",
    "title": "My page",
    "section": "Requirements:",
    "text": "Requirements:\n\nAll your wrangling, SQL and mapping files must be individual files on different webpages. They must be rendered to html.\nFor each bit you must reflect on what you learned or why you like a particular piece (200 words max).\nYour website will have 5 pages minimum:\n\nLanding page - this will describe the class, what you did, your thoughts on it, and what the website contains, its a summary. You can add a bit about yourself, but no identifying information. Saying Intro to Data Science is okay, but you shouldn’t mention Smith College.\nOne page per data piece.\nAn about page so people can contact you to hire you (Add a different photo to the fake contact page). You can not add identifying info here.\n\nYou will make use of the nav bar.\nYour website should look professional use any of the skills from 192 or 100. Consider headers and links.\nYour website must be pushed to github and turned on and working. So please test it. When you are done submit the link to your site to the forum on moodle."
  },
  {
    "objectID": "Readme.html#optional",
    "href": "Readme.html#optional",
    "title": "My page",
    "section": "Optional:",
    "text": "Optional:\n\nHere is the website for quarto websites.\nChange the theme of your website.\nCustomize your website using ideas from here."
  },
  {
    "objectID": "Readme.html#a-few-things-to-note",
    "href": "Readme.html#a-few-things-to-note",
    "title": "My page",
    "section": "A few things to note:",
    "text": "A few things to note:\n\nI am meant to protect your identity as students, so please do not put your personal information on the website. Use the made up contact information for your contact. Don’t even say Smith College. Remember even if you pages are public your repos are private.\nAfter your website is graded, I’ll turn them off. If you would like you can turn them on and do whatever you want with it. Keep in mind when you graduate from Smith you’ll lose your Smith email and likely your repo/website. But you’ll still have them as files on your computer.\nThis is meant to be a simple skill that students last semester wished they knew how to do. It should not be very very time consuming. Make something that meet requirements then move on. You can perfect it over the summer."
  },
  {
    "objectID": "Examples/map_example.html",
    "href": "Examples/map_example.html",
    "title": "Monarch Watch",
    "section": "",
    "text": "# I made the US state map for you.\n\nUSA_map &lt;-  maps::map(\"state\", plot = TRUE, fill = TRUE) |&gt; st_as_sf(coords = c(\"x\", \"y\"), crs = 4326)"
  },
  {
    "objectID": "Examples/lab7.html",
    "href": "Examples/lab7.html",
    "title": "Monarch Watch",
    "section": "",
    "text": "#install.packages(\"googlesheets4\")\nlibrary(googlesheets4)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(tidygeocoder)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(leaflet)\n\n\n# I made the US state map for you.\n\nUSA_map &lt;-  maps::map(\"state\", plot = FALSE, fill = TRUE) |&gt; st_as_sf(coords = c(\"x\", \"y\"), crs = 4326)"
  },
  {
    "objectID": "Examples/lab_8.html",
    "href": "Examples/lab_8.html",
    "title": "Querying a MySQL database",
    "section": "",
    "text": "NOTE: The Rendered document was too long, so the professor reccomended that we shorten the document and to use limit.\nThis lab was originally created by Profs Ben Baumer and Jordan Crouser. I’ve edited it slightly.\nSQL is a longstanding database querying language. It is a loosely-implemented standard. We will be using MySQL.\nTo facilitate our connection to the MySQL database server, we will need to install the RMySQL package.\n# do NOT install RMySQL if you are on the RStudio Server\ninstall.packages(\"RMySQL\")\nGoal: by the end of this lab, you will be able to write basic SELECT queries in SQL and retrieve the results into R."
  },
  {
    "objectID": "Examples/lab_8.html#connecting-to-mysql",
    "href": "Examples/lab_8.html#connecting-to-mysql",
    "title": "Querying a MySQL database",
    "section": "Connecting to MySQL",
    "text": "Connecting to MySQL\nThe data we will be using is stored on a server in Bass Hall. It’s called scidb.smith.edu. We can connect through the dbConnect() function provided by the DBI package (which is loaded automatically when you load RMySQL). You will also need the RMySQL package installed.\n\nlibrary(tidyverse)\nlibrary(RMySQL)\ndb &lt;- dbConnect(\n  MySQL(),\n  host = \"scidb.smith.edu\",\n  user = \"sds192\",\n  password = \"DSismfc@S\",\n  dbname = \"imdb\"\n  )\nknitr::opts_chunk$set(connection= 'db', max.print = 5)\n\nThis chunk of code will allow you to connect to scidb. Note that this creates a database connection object named db, which has the class MySQLConnection.\n\nclass(db)\n\n[1] \"MySQLConnection\"\nattr(,\"package\")\n[1] \"RMySQL\"\n\n\nAlso, we set the connection parameter for all future chunks in this R Markdown file. Note also that the max.print argument sets the maximum number of results printed by each query.\nEach of the following chunks makes use of the SQL engine functionality in knitr. You may want to read about this. Each of the following chunks is an sql chunk – as opposed to an r chunk!\nTo retrieve the results from a query in R, use the dbGetQuery() function from the DBI package (which is automatically loaded when you load RMySQL). Its first argument is a database connection object, and the second argument is an SQL query as a character vector."
  },
  {
    "objectID": "Examples/lab_8.html#retrieving-data",
    "href": "Examples/lab_8.html#retrieving-data",
    "title": "Querying a MySQL database",
    "section": "Retrieving data",
    "text": "Retrieving data\nWe want to be able to see which type of databases exist on the server. We can do this with SHOW DATABASES\n\ndbGetQuery(conn = db,\n           \"SHOW DATABASES\") |&gt;\n  head(5)\n\n            Database\n1           airlines\n2           citibike\n3                fec\n4               imdb\n5 information_schema\n\n\nNote: If you had a problem on Friday and need to use dbGetQuery(conn=db, “SHOW DATABASES;) you will have to edit the code chunks below and above. Otherwise you can use the SQL chunks as printed. \nYou don’t actually need the ; at the end of the quiery above for MySQL, but for other SQL dialects you do so it doesn’t hurt.\nWe want to use the imdb databse and we have to tell our db connection that.\n\ndbGetQuery(conn = db,\"USE imdb;\")\n\ndata frame with 0 columns and 0 rows\n\n\nIts fine that there are 0 rows, this is just how we tell R which db we want to use.\nLet’s look at the tables available in imdb.\n\ndbGetQuery(conn = db, \"SHOW TABLES;\")\n\n    Tables_in_imdb\n1         aka_name\n2        aka_title\n3        cast_info\n4        char_name\n5   comp_cast_type\n6     company_name\n7     company_type\n8    complete_cast\n9        info_type\n10         keyword\n11       kind_type\n12       link_type\n13 movie_companies\n14      movie_info\n15  movie_info_idx\n16   movie_keyword\n17      movie_link\n18            name\n19     person_info\n20       role_type\n21           title\n\n\nSee the kind_type table? That one shows what type of movie it is.\nThis query returns the list of kinds of “movies” stored in the IMDB. We are selecting everything with * from the kind_type table.\n\ndbGetQuery(conn = db, \"SELECT * FROM kind_type;\")\n\n  id           kind\n1  1          movie\n2  2      tv series\n3  3       tv movie\n4  4    video movie\n5  5 tv mini series\n6  6     video game\n7  7        episode\n\n\nOf course, you will often want to store the result of your query as a data frame. This can be achieved by setting the output.var argument in the chunk. Here we retrieve the list of different types of information stored in the database, save it as a data frame in R, and show the first few rows.\n\n## output.var=\"info_types\" in this chunk\n\ninfo_types&lt;- dbGetQuery(conn = db, \"SELECT * FROM info_type;\")\n\nWe now have a data.frame called info_types in our environment.\n\n# Note: this is an r chunk s we use R instead of SQL.\n\nhead(info_types)\n\n  id         info\n1  1     runtimes\n2  2   color info\n3  3       genres\n4  4    languages\n5  5 certificates\n6  6    sound mix\n\n\nThat’s all you need to know about how to get data from MySQL into R. The rest of this lab consists of practicing writing SQL queries. It may be useful to reference the full documentation for SELECT queries.\nFor example, let’s say I wanted to find information on the wacky Bill Murray Movie Groundhog Day.\nThe titles are stored in the title field (i.e. column) in the title table. [Note: your professor is not responsible for naming these tables and fields!] Each row in the title table corresponds to a single movie, but of course, we need to restrict the rows we retrieve to only those where the title field equals Groundhog Day. The following query achieves this.\n\nNote: SQL does not require the == for testing equality, since you aren’t ever changing the data.\n\n\nNote: You have to use ' single quotes since you are working within a \" double-quoted string.\n\nIn the chunk below we select every column from the title-table where the title-variable equals ‘Groundhog Day’\n\ndbGetQuery(conn = db, \n           \"SELECT *\n           FROM title\n           WHERE title= 'Groundhog Day'\n           LIMIT 10;\")\n\n       id         title imdb_index kind_id production_year imdb_id\n1   19605 Groundhog Day       &lt;NA&gt;       7            2014      NA\n2   27895 Groundhog Day       &lt;NA&gt;       7            2008      NA\n3  387076 Groundhog Day       &lt;NA&gt;       7            2011      NA\n4  384111 Groundhog Day       &lt;NA&gt;       7            2016      NA\n5  337084 Groundhog Day       &lt;NA&gt;       7            2016      NA\n6  406720 Groundhog Day       &lt;NA&gt;       7            2008      NA\n7  453412 Groundhog Day       &lt;NA&gt;       7            2013      NA\n8  739375 Groundhog Day       &lt;NA&gt;       7            2003      NA\n9  749553 Groundhog Day       &lt;NA&gt;       7            2005      NA\n10 899995 Groundhog Day       &lt;NA&gt;       7            2015      NA\n   phonetic_code episode_of_id season_nr episode_nr series_years\n1          G6532         19602         1          2         &lt;NA&gt;\n2          G6532         27822         1         48         &lt;NA&gt;\n3          G6532        387052         1          2         &lt;NA&gt;\n4          G6532        384073         1         11         &lt;NA&gt;\n5          G6532        337080         1          5         &lt;NA&gt;\n6          G6532        406715         1          6         &lt;NA&gt;\n7          G6532        453388         1         39         &lt;NA&gt;\n8          G6532        739088         7          1         &lt;NA&gt;\n9          G6532        749522         3          4         &lt;NA&gt;\n10         G6532        899984         4          1         &lt;NA&gt;\n                             md5sum\n1  a5e203197e1aa883f7884eb89e924aad\n2  74ebd1bfceb83d4bdae480326d00b493\n3  b8d621787a0ea75c76eff6b8a6a803c1\n4  bcef9ee95ae2bb82eca4ae2341084054\n5  fcaddb8be4ab7b9c5ca9f27bb325d869\n6  07d71924ad7cb3e2cbc26b36c7b947ec\n7  a5319edde61625b2a812edd32e552821\n8  419502b27afaa77a170c2ed0c07be5da\n9  c25e2aa6984230afe9163f81f23b04fb\n10 033a2f4e4fbe2d00068ef81c2979a744\n\n\nThat retrieved a lot of movies! Let’s see if we can refine our query. First, movies (as opposed to TV episodes, etc.) have the kind_id value of 1.\n\ndbGetQuery(conn = db, \"SELECT *\n           FROM title\n           WHERE title = 'Groundhog Day'\n           AND kind_id = 1;\")\n\n       id         title imdb_index kind_id production_year imdb_id\n1 3664274 Groundhog Day       &lt;NA&gt;       1            1993      NA\n  phonetic_code episode_of_id season_nr episode_nr series_years\n1         G6532            NA        NA         NA         &lt;NA&gt;\n                            md5sum\n1 2f0a563d0b0a1f57a19385de5a8770e2\n\n\nNow we have the result that I want.\nImagine that I didn’t know the full title of the movie I could soften my query by searching for the phrase Groundhog within the title. We can do this using the LIKE function along with some wildcards (% in SQL).\n\ndbGetQuery(conn = db, \"SELECT *\n           FROM title\n           WHERE title LIKE '%Groundhog%'\n           AND kind_id = 1;\")\n\n       id           title imdb_index kind_id production_year imdb_id\n1 3664274   Groundhog Day       &lt;NA&gt;       1            1993      NA\n2 3664277      Groundhogs       &lt;NA&gt;       1            2015      NA\n3 3664273       Groundhog       &lt;NA&gt;       1            2017      NA\n4 3664276 Groundhog's Day       &lt;NA&gt;       1            2016      NA\n  phonetic_code episode_of_id season_nr episode_nr series_years\n1         G6532            NA        NA         NA         &lt;NA&gt;\n2         G6532            NA        NA         NA         &lt;NA&gt;\n3         G6532            NA        NA         NA         &lt;NA&gt;\n4         G6532            NA        NA         NA         &lt;NA&gt;\n                            md5sum\n1 2f0a563d0b0a1f57a19385de5a8770e2\n2 7b71cb8ae79de1171a71f95d2e50afd6\n3 5e7183dbeb6c28fb6445c4013b2bd5d0\n4 c45dd6456b9787e5f71144d6c3a2295e\n\n\nPretend I’m still not sure which of the above four movies is the real Groundhog Day movie I’m interested in, but I’m sure its the first movie that came out. I could put them in order with the code below.\n\ndbGetQuery(conn = db, \"SELECT *\n           FROM title\n           WHERE title LIKE '%Groundhog%'\n           AND kind_id = 1\n           ORDER BY production_year;\")\n\n       id           title imdb_index kind_id production_year imdb_id\n1 3664274   Groundhog Day       &lt;NA&gt;       1            1993      NA\n2 3664277      Groundhogs       &lt;NA&gt;       1            2015      NA\n3 3664276 Groundhog's Day       &lt;NA&gt;       1            2016      NA\n4 3664273       Groundhog       &lt;NA&gt;       1            2017      NA\n  phonetic_code episode_of_id season_nr episode_nr series_years\n1         G6532            NA        NA         NA         &lt;NA&gt;\n2         G6532            NA        NA         NA         &lt;NA&gt;\n3         G6532            NA        NA         NA         &lt;NA&gt;\n4         G6532            NA        NA         NA         &lt;NA&gt;\n                            md5sum\n1 2f0a563d0b0a1f57a19385de5a8770e2\n2 7b71cb8ae79de1171a71f95d2e50afd6\n3 c45dd6456b9787e5f71144d6c3a2295e\n4 5e7183dbeb6c28fb6445c4013b2bd5d0\n\n\nFinally I can select just the three columns I’m interested in. Also notice that I am renaming the title table as t. So I select the columns t.title and t.production_year. This is called creating an alias. The convention is table.variable. This will be useful when joining tables.\n\ndbGetQuery(conn = db, \"SELECT t.id, t.title, t.production_year\n           FROM title AS t\n           WHERE title LIKE '%Groundhog%'\n           AND t.kind_id = 1\n           ORDER BY t.production_year;\")\n\n       id           title production_year\n1 3664274   Groundhog Day            1993\n2 3664277      Groundhogs            2015\n3 3664276 Groundhog's Day            2016\n4 3664273       Groundhog            2017\n\n\nIts the first Groundhog day that came out in 1993 with ID 3664274."
  },
  {
    "objectID": "Examples/lab_8.html#joining-tables",
    "href": "Examples/lab_8.html#joining-tables",
    "title": "Querying a MySQL database",
    "section": "Joining tables",
    "text": "Joining tables\nIn the IMDB, the title table contains information about movies, the name table contains the names of people, the char_name table contains information about the names of characters, and the cast_info table contains information about which people played which roles in which movies. Linking the tables together is essential in order to extract information from the database.\nSince we already know that the ID of Groundhog Day is 3664274, we can use that to find all of the cast assignments.\n\ndbGetQuery(conn= db, \"SELECT *\n           FROM cast_info\n           WHERE movie_id = 3664274\n           LIMIT 10;\")\n\n        id person_id movie_id person_role_id         note nr_order role_id\n1   118176     17392  3664274            376         &lt;NA&gt;       43       1\n2  1764292    232622  3664274         352541 (uncredited)       NA       1\n3  2746369    354870  3664274         191351         &lt;NA&gt;       13       1\n4  3167452    400710  3664274         140101         &lt;NA&gt;       34       1\n5  4584838    577860  3664274             98 (uncredited)       NA       1\n6  4725830    596320  3664274         264682 (uncredited)       NA       1\n7  5044054    638176  3664274          42869         &lt;NA&gt;        5       1\n8  5100344    646080  3664274         880820         &lt;NA&gt;       22       1\n9  5106264    647033  3664274           1913         &lt;NA&gt;        8       1\n10 5395988    685478  3664274           5433         &lt;NA&gt;        3       1"
  },
  {
    "objectID": "Examples/lab4.html",
    "href": "Examples/lab4.html",
    "title": "Lab 4: Exploratory Data Analysis",
    "section": "",
    "text": "library(tidyverse)\n\nsqf_url &lt;- \"https://www1.nyc.gov/assets/nypd/downloads/zip/analysis_and_planning/stop-question-frisk/sqf-2011-csv.zip\"\ntemp &lt;- tempfile()\ndownload.file(sqf_url, temp)\nsqf_zip &lt;- unzip(temp, \"2011.csv\")\nsqf_2011 &lt;- read.csv(sqf_zip, stringsAsFactors = FALSE) \nsqf_2011_race_cat &lt;- read.csv(\"https://raw.githubusercontent.com/lindsaypoirier/STS-101/master/Data/SQF/sqf_race_categories.csv\", stringsAsFactors = FALSE) \nrm(sqf_url)\nrm(temp)\nrm(sqf_zip)\n\n\nsqf_2011 &lt;- \n  sqf_2011 |&gt; \n  select(pct, race, age, frisked, pistol, riflshot, asltweap, knifcuti, machgun, othrweap, sumissue, arstmade) |&gt;\n  left_join(sqf_2011_race_cat, by = \"race\") |&gt;\n  mutate(across(frisked:arstmade, \n         ~ case_when(. == \"Y\" ~ 1, . == \"N\" ~ 0)))\nrm(sqf_2011_race_cat)\n\n\nQuestion\n\nAdd two new columns. The first should indicate whether a weapon was found, and the second should indicate whether an arrest/summons was made.\n\n\nlibrary(dplyr)\nsqf_2011 &lt;- \n  sqf_2011 |&gt;\n  #Add a variable for weapon found\n  mutate(wpnfound = case_when(pistol == 1 |\n                               riflshot == 1 | \n                               asltweap == 1 |\n                               knifcuti == 1 | \n                               machgun == 1 | \n                               othrweap == 1 ~ 1,\n                             TRUE ~ 0))\nsqf_2011 &lt;- \n  sqf_2011 |&gt;\n  #Add a variable for arrest made or summons issued\n  mutate(arrestsumm = case_when(sumissue == 1 | \n                                arstmade == 1 ~ 1,\n                               TRUE ~ 0))\n\n\n\nQuestion\n\nSubset the dataset to the six variables listed in the data dictionary above.\n\n\nsqf_2011_1 &lt;-\n  sqf_2011 |&gt;\n  select(pct, arrestsumm, age, wpnfound, race_cat, frisked)\n\n\n\nQuestion\n\nCalculate the number of stops in 2011. If you are not sure which function to use below, you may want to refer to the list of Summary functions in the the Data Wrangling cheatsheet. Remember that each row in the data frame is a stop.\n\n\ntotal_stops &lt;-\n  sqf_2011 |&gt;\n  summarize(Count = n()) |&gt;\n  pull()\n\ntotal_stops\n\n[1] 685724\n\n\n\n\nQuestion\n\nHow many stops did not result in an arrest or summons in 2011? What percentage of stops did not result in an arrest or summons?\n\n\nsqf_2011 |&gt;\n  #Subset to rows where suspect innocent\n  filter(arrestsumm == 0) |&gt; \n  #Calculate number of observations\n  summarise(total_innocent = n(), \n            percent_innocent = n() / total_stops * 100)\n\n  total_innocent percent_innocent\n1         605328         88.27575\n\n\n\n\nQuestion\n\nIn how many stops were the individuals aged 14-24? In what percentage of stops were the individuals aged 14-24?\n\n\nsqf_2011 |&gt;\n  #Subset to rows where suspect age 14-24\n  filter(age &gt;=14 & age &lt;= 24) |&gt; \n  #Calculate number of observations and percentage of observations\n  summarise(total_14_24 = n(), \n            percent_14_24 = n() / total_stops * 100)\n\n  total_14_24 percent_14_24\n1      346226      50.49058\n\n\n\n\nQuestion\n\nFix the code below to calculate the currect number of stops for individuals 14-24.\n\n\ntotal_stops_age_recorded &lt;-\n  sqf_2011 |&gt;\n  #Subset to rows where age is not 999\n  filter(age != 999) |&gt; \n  summarize(Count = n()) |&gt;\n  pull()\n\nsqf_2011 |&gt;\n  filter(age &gt;= 14 & age &lt;= 24) |&gt;\n  summarize(total_14_24 = n(), \n            percent_14_24 = n() / total_stops_age_recorded * 100)\n\n  total_14_24 percent_14_24\n1      346226       50.5542\n\n\nThis still doesn’t match the values we see on the website, but it does match the values we see in the NYCLU’s 2011 report on Stop, Question, and Frisk data. This is typically when I would reach out to a representative at the NYCLU to inquire about the discrepancy.\n\n\nQuestion\n\nHow many stops were there per race in 2011? What percentage of stops per race in 2011? Arrange by number of stops in descending order.\n\n\ntotal_stops_race_recorded &lt;-\n  sqf_2011 |&gt;\n  #Subset to rows where race_cat is not NA or \"OTHER\"\n  filter(!is.na(race_cat) & race_cat != \"OTHER\") |&gt; \n  summarize(Count = n()) |&gt;\n  pull()\n\nsqf_2011 |&gt;\n  #Subset to rows where race_cat is not NA or \"OTHER\"\n  filter(!is.na(race_cat) & race_cat != \"OTHER\") |&gt; \n  #Group by race\n  group_by(race_cat) |&gt; \n  #Calculate number of observations\n  summarise(stops = n(), \n            percent_stops = n() / total_stops_race_recorded * 100) |&gt;\n  #Sort by stops in descending order\n  arrange(desc(stops)) \n\n# A tibble: 6 × 3\n  race_cat                        stops percent_stops\n  &lt;chr&gt;                           &lt;int&gt;         &lt;dbl&gt;\n1 BLACK                          350743        52.9  \n2 WHITE-HISPANIC                 175302        26.4  \n3 WHITE                           61805         9.32 \n4 BLACK-HISPANIC                  48438         7.30 \n5 ASIAN/PACIFIC ISLANDER          23932         3.61 \n6 AMERICAN INDIAN/ALASKAN NATIVE   2897         0.437"
  }
]